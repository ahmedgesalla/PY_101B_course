#Title: Assignment02
#Desc: This assignment demonstrates using constants, variables, and print()
#Change log: (who, when, what)
#    RRoot, 5/11/2024, created script
# Ahmed Gesalla, 5/11/2024, created script

student_first_name: str
student_last_name: str
course_name:str
csv_data: str
file_data: str = ''
student_data:dict = {}
json_data: str = ''


import json 


MENU = '''---- Course Registration Program ----
  Select from the following menu:  
    1. Register a Student for a Course
    2. Show current data  
    3. Save data to a file
    4. Exit the program'''

FILE_NAME: str = "Enrollments.json"

menu_choice: str = ""
students:list [dict[str, str| float]] = []


class FileProcessor:
      

    @staticmethod
    def read_data_from_file(file_name: str, student_data:list):
        global file 
        global students 
        global FILENAME 

        pass 

        try:
            file = open(file_name, 'r') 
            students = json.load(file)

        except FileNotFoundError as e:
            print ('Text file not found')
            print('----Techincal Information')
            print(e, e.__doc__, type(e), sep ='\n')
            print("Creating file since it doesn't exist")
            file = open (FILENAME, 'w')
            json.dump(students, file)
        except json.JsonDecodeError as e:
            print ('Text file not found')
            print('----Techincal Information')
            print(e, e.__doc__, type(e), sep ='\n')
            print("Data not found in file, Resetting it...")
            file = open(FILENAME, 'w')
            json.dump(students, file)
        except Exception as e:
            print ('An Error Occurred reading file')
            print('----Techincal Information')
            print(e, e.__doc__, type(e), sep ='\n')
        finally:
            if not file.closed:
                file.close()


    def write_data_to_file(file_name: str, student_data:list):
        
        try: 
           file = open(FILENAME, 'w')
           json.dump(students, file)
           print(f'Data is Saved to Enrollment.json')
        except Exception as e:
            print(' Error found writing to the file')
    
class IOProccessor:


    def output_error_messages(message:str, error: Exception= None):
        print(message, end= "\n\n")

        if error is not None:
            print ("---Technical Error Message")
            print(error, error.---doc---, type(error),sep='\n')

        
    def output_menu (menu:str):
        print(menu)

    def input_student_data(student_data: list):

        pass

        try:
            student_first_name = input('Please Enter First Name')
            if not student_first_name.isalpha():
               raise ValueError("The last name should not contain numbers")
            student_last_name = input('Please Enter Last Name')
            if not student_last_name.isalpha():
                raise ValueError ("The last name should not contain numbers")
            course_name = input('Enter Course Name')
            student_data.append({"First Name": student_first_name,"Last Name": student_last_name, "Course":course_name})

            student_data.append(students)

            print()
            print(f"you have registered {student_first_name} {student_last_name} for {course_name}")

            #student_first_name = input('Please Enter First Name')
            #student_last_name= input('Please Enter Last Name')
            #course_name = input('Enter Course Name')
           # student_data.append({"First Name": student_first_name,"Last Name": student_last_name, "Course":course_name})
        except Exception as e:
            IOProccessor.output.message('Enter an opption between 1 and 4')

    def output_student_courses(student_data:list):

        for student in student_data:
            print(f"{student['FirstName']} {student['Last Name']} is enrolled in {student['Course Name']}")



while True:

    IOProccessor.output_menu(menu= MENU)

    menu_choice = IOProccessor.input_menu_choice()

    if menu_choice =="1":
        students = IOProccessor.input_student_data(student_data=students)
        continue
    elif menu_choice =="2":
        students = IOProccessor.output_student_data(student_data=students)
        continue
    elif menu_choice=="3":
        FileProcessor.write_data_to_file(FILE_NAME, students)
        continue
    elif menu_choice =="4":

        print("The Program Ends")

        break

    else:

        print("Invalid choice, please select valid option")

   # if menu_choice =="1":

      #  try:
           # student_first_name = input('Please Enter First Name')
          #  if not student_first_name.isalpha():
               # raise ValueError("The last name should not contain numbers")
           # student_last_name = input('Please Enter Last Name')
           # if not student_last_name.isalpha():
            #    raise ValueError ("The last name should not contain numbers")
           # course_name = input('Enter Course Name')
           # student_data.append({"First Name": student_first_name,"Last Name": student_last_name, "Course":course_name})


    
 #   print(MENU)
   # select = input('What would you like to do ')

   # if select == '1':
    #    student_first_name = input('Please Enter First Name')
    #    student_last_name= input('Please Enter Last Name')
     #   course_name = input('Enter Course Name')
  #  elif select == '2':
  #      print('Currnt Data shown')
   #     print(f'{student_first_name}, {student_last_name}, {course_name}')
   # elif select == '3':
   #     csv_file = open('csv_data', 'w')
    #    Enrollments_file = open('Enrollments_csv', 'w')
     #   csv_file.write(f'{student_first_name} {student_last_name} {course_name}\n')
     #   csv_file.close()
    #elif select == '4':
     #   message3 = 'The Program Ends'
     #   print(message3)
      #  break
   # else:
   #     print('Please Enter Valid Option')
